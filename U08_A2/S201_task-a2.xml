<?xml version="1.0"?>
<slide id="68b016c3-e352-45e9-a5fd-1f919933d6e4" title="Задание A2. Rebase" xmlns="https://ulearn.me/schema/v2">

<markdown>
  # Краткая инструкция
</markdown>
<html>
  Создай ветку <code>rebase-feature</code> с коммитами:
  <ul>
    <li>Коммит с сообщением <code>Add rebase.md</code>,<br/>
    в котором добавляется файл <code>rebase.md</code> с содержимым:
<pre>## A2. Пересоздание истории
- `git commit --amend --no-edit` — заменить последний коммит ветки на отредактированный с дополнительными изменениями без изменения сообщения
- `git rebase {upstream}` — применить все коммиты от общего родителя до текущего к `{upstream}`
- `git rebase -i {upstream}` — применить заново все коммиты, указав действие с каждым коммитом
- `git rebase --continue` — продолжить rebase после разрешения конфликтов
- `git rebase --abort` — отменить rabase
- `git cherry-pick {commit}` — применить указанный коммит к HEAD</pre>
    </li>
    <li>Коммит с сообщением <code>Change branch.md</code>,<br/>
    в котором изменяется содержимое файла <code>branch.md</code> на следующее:
<pre>## S3. Ссылки: HEAD, теги и ветки
- `git tag` — вывести список тегов
- `git tag {tagname}` — создать тег
- `git branch` — вывести список локальных веток
- `git branch -av` — вывести список локальных и удаленных веток
- `git branch {branchname}` — создать ветку
- `git branch -d {branchname}` — удалить ветку
- `git checkout {commit}` или `git switch --detach {commit}` — переместить HEAD на коммит, причем получится detached HEAD
- `git checkout {branch}`или `git switch {branch}` — переместить HEAD на ветку
- `git checkout -b {new_branch}` или `git switch -c {new_branch}` — создать ветку и перейти на нее
- `git reset --hard {commit}` — переместить HEAD и текущую ветку на `{commit}`
- `git reflog show {ref}` — показать лог действий со ссылкой
- `git reflog` = `git reflog show HEAD` — показать лог действий с HEAD
- `git gc` — удалить ненужные файлы и оптимизировать локальный репозиторий</pre>
    </li>
  </ul>

  В ветке <code>main</code> добавь коммит:
  <ul>
    <li>Коммит с сообщением <code>Add reflog stub to branch.md</code>,<br/>
    в котором изменяется содержимое файла <code>branch.md</code> на следующее:
<pre>## S3. Ссылки: HEAD, теги и ветки
- `git tag` — вывести список тегов
- `git tag {tagname}` — создать тег
- `git branch` — вывести список локальных веток
- `git branch -av` — вывести список локальных и удаленных веток
- `git branch {branchname}` — создать ветку
- `git branch -d {branchname}` — удалить ветку
- `git checkout {commit}` или `git switch --detach {commit}` — переместить HEAD на коммит, причем получится detached HEAD
- `git checkout {branch}`или `git switch {branch}` — переместить HEAD на ветку
- `git checkout -b {new_branch}` или `git switch -c {new_branch}` — создать ветку и перейти на нее
- `git reset --hard {commit}` — переместить HEAD и текущую ветку на `{commit}`
### Lorem ipsum dolor sit amet, consectetur adipiscing elit</pre>
    </li>
  </ul>

  <p>Установи тег <code>old-rebase-feature</code> на последний коммит ветки <code>rebase-feature</code>.</p>

  <p>Выполни rebase ветки <code>rebase-feature</code> на ветку <code>main</code> и устрани конфликты в пользу изменений из <code>rebase-feature</code>.</p>

  <p>Убедись, что благодаря тегу <code>old-rebase-feature</code> старые коммиты до сих пор видны, после чего удали тег.</p>
</html>


<markdown>
  # Пошаговая инструкция

  Рекомендуется выполнять задание по краткой инструкции, но если в ней что-то неясно, то можно воспользоваться подробной инструкцией.
</markdown>
<spoiler text="Пошаговая инструкция в терминале">
<html>
<ol>
    <li>Создай ветку <code>rebase-feature</code> и перейди на нее.</li>

    <li>Создай файл <code>rebase.md</code> со следующим содержимым:
<pre>## A2. Пересоздание истории
- `git commit --amend --no-edit` — заменить последний коммит ветки на отредактированный с дополнительными изменениями без изменения сообщения
- `git rebase {upstream}` — применить все коммиты от общего родителя до текущего к `{upstream}`
- `git rebase -i {upstream}` — применить заново все коммиты, указав действие с каждым коммитом
- `git rebase --continue` — продолжить rebase после разрешения конфликтов
- `git rebase --abort` — отменить rabase
- `git cherry-pick {commit}` — применить указанный коммит к HEAD</pre>
    </li>

    <li>Закоммить изменения с сообщением <code>Add rebase.md</code>.</li>

    <li>Замени содержимое <code>branch.md</code> на следующее:
<pre>## S3. Ссылки: HEAD, теги и ветки
- `git tag` — вывести список тегов
- `git tag {tagname}` — создать тег
- `git branch` — вывести список локальных веток
- `git branch -av` — вывести список локальных и удаленных веток
- `git branch {branchname}` — создать ветку
- `git branch -d {branchname}` — удалить ветку
- `git checkout {commit}` или `git switch --detach {commit}` — переместить HEAD на коммит, причем получится detached HEAD
- `git checkout {branch}`или `git switch {branch}` — переместить HEAD на ветку
- `git checkout -b {new_branch}` или `git switch -c {new_branch}` — создать ветку и перейти на нее
- `git reset --hard {commit}` — переместить HEAD и текущую ветку на `{commit}`
- `git reflog show {ref}` — показать лог действий со ссылкой
- `git reflog` = `git reflog show HEAD` — показать лог действий с HEAD
- `git gc` — удалить ненужные файлы и оптимизировать локальный репозиторий</pre>
    </li>

    <li>Закоммить изменения с сообщением <code>Change branch.md</code>.</li>

    <li>Перейди на ветку <code>main</code>.</li>

    <li>Замени содержимое <code>branch.md</code> на следующее:
<pre>## S3. Ссылки: HEAD, теги и ветки
- `git tag` — вывести список тегов
- `git tag {tagname}` — создать тег
- `git branch` — вывести список локальных веток
- `git branch -av` — вывести список локальных и удаленных веток
- `git branch {branchname}` — создать ветку
- `git branch -d {branchname}` — удалить ветку
- `git checkout {commit}` или `git switch --detach {commit}` — переместить HEAD на коммит, причем получится detached HEAD
- `git checkout {branch}`или `git switch {branch}` — переместить HEAD на ветку
- `git checkout -b {new_branch}` или `git switch -c {new_branch}` — создать ветку и перейти на нее
- `git reset --hard {commit}` — переместить HEAD и текущую ветку на `{commit}`
### Lorem ipsum dolor sit amet, consectetur adipiscing elit</pre>
    </li>

  <li>Закоммить изменения с сообщением <code>Add reflog stub to branch.md</code>.</li>

  <li>
    Установи тег <code>old-rebase-feature</code> на коммит, на который ссылается <code>rebase-feature</code>:
    <div><code>git tag old-rebase-feature rebase-feature</code></div>
    <div><i>В этой команде первый аргумент — имя тега, а второй — идентификатор коммита. В качестве идентификатора коммита можно передать его хэш или ветку, которая на него указывает</i></div>
  </li>

  <li>Перейди на ветку <code>rebase-feature</code>.</li>

  <li>Выполни rebase <code>rebase-feature</code> на <code>main</code>: убедись что <code>HEAD</code> уже находится на <code>rebase-feature</code> и выполни команду <code>git rebase main</code>. При rebase возникнет конфликт.</li>

  <li>
    Первый коммит <code>Add rebase.md</code> успешно скопирован, а вот <code>Change branch.md</code> по понятным причинам порождает конфликты.
    Открой в VS Code в боковом меню пункт Source Control.
    Несмотря на то, что файлы были созданы в разных ветках, Git видит,
    что первые строчки совпадают и по ним конфликта нет. А вот оставшиеся строчки конфликтуют.
    Так как в ветке <code>rebase-feature</code> был правильный текст, нажми <code>Accept Incoming Change</code>.
    Добавь <code>branch.md</code> в Commit Index и выполни команду <code>git rebase --continue</code>.
    Раз оба коммита были успешно скопированы, rebase на этом будет закончен.
    Фанфар по этому поводу не будет. В терминале просто появится сообщение «Applying: Change branch.md» без каких-либо ошибок после.
  </li>

  <li>
    Обрати внимание, что в результате rebase были созданы коммиты <code>Add rebase.md</code> и <code>Change branch.md</code>.
    Хоть они похожи на исходные, все же это новые коммиты с новыми ревизиями.
    Ветка <code>rebase-feature</code> была перемещена и теперь ссылается на новый коммит.
    Старые коммиты остались в репозитории и на последний из них все еще ссылается тег <code>old-rebase-feature</code>.
  </li>

  <li>Тег <code>old-rebase-feature</code> больше не нужен, поэтому удали его командой <code>git tag -d old-rebase-feature</code>.</li>
  </ol>
</html>
</spoiler>

<markdown>
  # Проверка результата
  После выполнения задания история коммитов должна выглядеть так:
</markdown>
<galleryImages>
  <image>img\task-a2-finish.png</image>
</galleryImages>

<markdown>
  # Авторское решение

  Можно проверить себя, найти ошибку в собственном решении или посмотреть как те же действия выполнить в различных средах.
</markdown>

<spoiler text="Решение в терминале">
  <youtube>dYEutOH_dXA</youtube>
</spoiler>
<spoiler text="Решение в VS Code с Git Graph">
  <youtube>dYEutOH_dXA</youtube>
</spoiler>

</slide>
